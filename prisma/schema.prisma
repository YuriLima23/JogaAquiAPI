// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String            @id
  name          String
  email         String         @unique
  cpf           String         @unique
  photo         String?
  phone         String?
  password      String
  token_auth    String?
  createdAt     DateTime       @default(now())
  updateAt      DateTime       @updatedAt
  // relation with Support 1:N
  supports      Support[]
  wallet        Wallet?
  solicitations Solicitation[]

}

model Support {
  id               Int      @id @default(autoincrement())
  message          String
  // apareceça apena o campo user no Banco mas necessita dessas duas colunas para criar a relação
  user             User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id          String
  message_response String?
  createdAt        DateTime @default(now())
  updateAt         DateTime @updatedAt
}

model Wallet {
  id               Int      @id @default(autoincrement())
  balance          Float
  previous_balance Float?
  user             User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id          String      @unique
  createdAt        DateTime @default(now())
  updateAt         DateTime @updatedAt
}

model Type_Recicle {
  id            Int                         @id @default(autoincrement())
  price         String
  icon          String?
  createdAt     DateTime                    @default(now())
  updateAt      DateTime                    @updatedAt
  solicitations Solicitation_Type_Recicle[]


}

model Solicitation_Type_Recicle {
  id              Int          @id @default(autoincrement())
  solicitation    Solicitation @relation(fields: [solicitation_id], references: [id])
  solicitation_id Int
  type_recicle    Type_Recicle @relation(fields: [type_recicle_id], references: [id])
  type_recicle_id Int

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Solicitation {
  id                  Int                         @id @default(autoincrement())
  total               Float
  status              Int
  weight              Int?
  reason_refusal      String?
  date_of_collect     DateTime
  latitude            Float
  longitude           Float
  user                User                        @relation(fields: [user_id], references: [id])
  user_id             String
  type_recicle        Solicitation_Type_Recicle[]
  history_transaction History_Transaction?
  createdAt           DateTime                    @default(now())
  updateAt            DateTime                    @updatedAt
}

model History_Transaction {
  id              Int          @id @default(autoincrement())
  status          Int
  solicitation Solicitation @relation(fields: [solicitation_id], references: [id])
  solicitation_id    Int          @unique
  createdAt       DateTime     @default(now())
  updateAt        DateTime     @updatedAt
}
